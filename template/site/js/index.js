$(function(){
    $("#maquina-de-escrever").typed({
      strings: ["(load \"dice_of_doom_v3.lisp\")\n\n(defparameter *num-players* 4)\n(defparameter *die-colors* '((255 63 63) (63 63 255) (63 255 63) \n                             (255 63 255)))\n\n(defparameter *max-dice* 5)\n(defparameter *ai-level* 2)\n\n(defun attacking-moves (board cur-player spare-dice)\n  (labels ((player (pos)\n\t\t   (car (aref board pos)))\n\t   (dice (pos)\n\t\t (cadr (aref board pos))))\n    (lazy-mapcan (lambda (src)\n                   (if (eq (player src) cur-player)\n                     (lazy-mapcan \n                       (lambda (dst)\n                         (if (and (not (eq (player dst) cur-player)) \n                                  (> (dice src) 1))\n                             (make-lazy (list (list (list src dst)\n      (game-tree (board-attack board cur-player src dst (dice src)) \n                 cur-player \n                 (+ spare-dice (dice dst)) \n                 nil)\n      (game-tree (board-attack-fail board cur-player src dst (dice src))\n                 cur-player \n                 (+ spare-dice (dice dst))\n                 nil))))\n                                      (lazy-nil)))\n                                  (make-lazy (neighbors src)))\n                     (lazy-nil)))\n                 (make-lazy (loop for n below *board-hexnum*\n\t\t\t\t  collect n)))))\n\n(defun board-attack-fail (board player src dst dice)\n  (board-array (loop for pos from 0\n                     for hex across board\n                     collect (if (eq pos src)\n                                 (list player 1)\n                               hex))))\n\n(defun roll-dice (dice-num)\n  (let ((total (loop repeat dice-num\n                     sum (1+ (random 6)))))\n    (fresh-line)\n    (format t \"On ~a dice rolled ~a. \" dice-num total)\n    total))\n\n(defun roll-against (src-dice dst-dice)\n  (> (roll-dice src-dice) (roll-dice dst-dice)))\n\n(defun pick-chance-branch (board move)\n  (labels ((dice (pos)\n                 (cadr (aref board pos))))\n    (let ((path (car move)))\n      (if (or (null path) (roll-against (dice (car path))\n                                        (dice (cadr path))))\n          (cadr move)\n        (caddr move)))))\n\n(defun handle-human (tree)\n  (fresh-line)\n  (princ \"choose your move:\")\n  (let ((moves (caddr tree)))\n    (labels ((print-moves (moves n)\n\t\t\t  (unless (lazy-null moves)\n\t\t\t    (let* ((move (lazy-car moves))\n\t\t\t\t   (action (car move)))\n\t\t\t      (fresh-line)\n\t\t\t      (format t \"~a. \" n)\n\t\t\t      (if action\n\t\t\t\t  (format t \"~a -> ~a\" (car action) (cadr action))\n\t\t\t\t(princ \"end turn\")))\n\t\t\t    (print-moves (lazy-cdr moves) (1+ n)))))\n\t    (print-moves moves 1))\n    (fresh-line)\n    (pick-chance-branch (cadr tree) (lazy-nth (1- (read)) moves))))\n\n(defun handle-computer (tree)\n  (let ((ratings (get-ratings (limit-tree-depth tree *ai-level*) (car tree))))\n    (pick-chance-branch\n      (cadr tree) \n      (lazy-nth (position (apply #'max ratings) ratings) (caddr tree)))))\n\n(defparameter *dice-odds* #(#(0.84 0.97 1.0 1.0)\n                            #(0.44 0.78 0.94 0.99)\n                            #(0.15 0.45 0.74 0.91)\n                            #(0.04 0.19 0.46 0.72)\n                            #(0.01 0.06 0.22 0.46)))\n\n(defun get-ratings (tree player)\n  (let ((board (cadr tree)))\n    (labels ((dice (pos)\n                   (cadr (aref board pos))))\n      (take-all (lazy-mapcar \n                  (lambda (move)\n                    (let ((path (car move)))\n                      (if path\n                          (let* ((src (car path))\n                                 (dst (cadr path))\n                                 (odds (aref (aref *dice-odds* \n                                                   (1- (dice dst)))\n                                             (- (dice src) 2))))\n                            (+ (* odds (rate-position (cadr move) player))\n                               (* (- 1 odds) (rate-position (caddr move)\n                                                            player))))\n                        (rate-position (cadr move) player))))\n                  (caddr tree))))))\n\n(defun limit-tree-depth (tree depth)\n  (list (car tree) \n\t  (cadr tree) \n\t  (if (zerop depth)\n\t      (lazy-nil)\n\t    (lazy-mapcar (lambda (move)\n                         (cons (car move)\n                               (mapcar (lambda (x)\n                                         (limit-tree-depth x (1- depth)))\n                                       (cdr move))))\n\t\t           (caddr tree)))))\n\n(defun get-connected (board player pos)\n  (labels ((check-pos (pos visited)\n             (if (and (eq (car (aref board pos)) player)\n                      (not (member pos visited)))\n                 (check-neighbors (neighbors pos) (cons pos visited))\n               visited))\n           (check-neighbors (lst visited)\n             (if lst\n                 (check-neighbors (cdr lst) (check-pos (car lst) visited))\n               visited)))\n    (check-pos pos '())))\n\n\n(defun largest-cluster-size (board player)\n  (labels ((f (pos visited best)\n\t      (if (< pos *board-hexnum*)\n\t\t  (if (and (eq (car (aref board pos)) player)\n                       (not (member pos visited)))\n\t\t      (let* ((cluster (get-connected board player pos))\n\t\t\t     (size (length cluster)))\n\t\t\t(if (> size best)\n\t\t\t    (f (1+ pos) (append cluster visited) size)\n\t\t\t  (f (1+ pos) (append cluster visited) best)))\n\t\t    (f (1+ pos) visited best))\n\t\tbest)))\n\t  (f 0 '() 0)))\n\n(defun add-new-dice (board player spare-dice)\n  (labels ((f (lst n)\n\t      (cond ((zerop n) lst)\n\t\t    ((null lst) nil)\n\t\t    (t (let ((cur-player (caar lst))\n\t\t\t     (cur-dice (cadar lst)))\n\t\t\t (if (and (eq cur-player player) (< cur-dice *max-dice*))\n                       (cons (list cur-player (1+ cur-dice))\n                             (f (cdr lst) (1- n)))\n\t\t\t   (cons (car lst) (f (cdr lst) n))))))))\n\t  (board-array (f (coerce board 'list) \n                        (largest-cluster-size board player)))))"],
      typeSpeed: -1000
    });
});
